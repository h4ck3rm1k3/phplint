
BEGIN parsing of 5-namespace-example-9.php
1:	<?php
2:	/*. require_module 'spl'; .*/
3:	namespace A\B\C;
4:	class Exception extends \Exception {}
5:	
6:	$a = new Exception('hi'); // $a is an object of class A\B\C\Exception
7:	$b = new \Exception('hi'); // $b is an object of class Exception
8:	
9:	$c = new ArrayObject; // fatal error, class A\B\C\ArrayObject not found

	$c = new ArrayObject; // fatal error, class A\B\C\ArrayObject not found
	                    \_ HERE
==== 9: ERROR: unknown class `ArrayObject'
10:	$c = new \ArrayObject; // fatal error, class A\B\C\ArrayObject not found

	$c = new \ArrayObject; // fatal error, class A\B\C\ArrayObject not found
	                      \_ HERE
==== 10: notice: missing parentheses after class name. Although the constructor ArrayObject::__construct has no mandatory arguments, it's a good habit to provide these parentheses.
11:	
12:	
13:	const E_ERROR = 45;
14:	
15:	/*. int .*/ function strlen(/*. int .*/ $i)
16:	{
17:	    return \strlen("" . $i) - 1;
18:	}
19:	
20:	echo E_ERROR, "\n"; // prints "45"
21:	echo INI_ALL, "\n"; // prints "7" - falls back to global INI_ALL
22:	
23:	echo strlen(123), "\n"; // prints "2"
24:	if (is_array('hi')) { // prints "is not array"
25:	    echo "is array\n";
26:	} else {
27:	    echo "is not array\n";
28:	}
29:	
30:	?>
END parsing of 5-namespace-example-9.php
==== 5-namespace-example-9.php:10: notice: variable `$c' assigned but never used
==== 5-namespace-example-9.php:7: notice: variable `$b' assigned but never used
==== 5-namespace-example-9.php:6: notice: variable `$a' assigned but never used
==== ?: notice: required module `spl'
==== ?: notice: required module `simplexml'
==== ?: notice: required module `dom'
==== ?: notice: required module `standard'
Overall test results: 1 errors, 0 warnings.
